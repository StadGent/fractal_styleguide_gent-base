////
///
/// Globally defined general purpose mixins.
/// These mixins can be used by multiple components.
///
/// @group tools
/// @author Gert-Jan Meire
///
////

///
///  Helper function to replace characters in a string.
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
/// @param {string} $string
///   The needle.
///
/// @param {string} $search
///   The haystack.
///
/// @param {string} $replace ['']
///   The separator.
///
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
    str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
    $string);
}

///
///  Helper function to get a border radius.
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
/// @param {string} $name
///   The name of the requested border radius.
///
/// @param {map} $border-radius [$border-radius]
///   The map with border radiuses defined in it.
///
///
@function border-radius($name, $border-radius: $border-radius) {
  @return map-get($border-radius, $name);
}

///
/// Clearfix
///
/// For modern browsers
/// 1. The space content is one way to avoid an Opera bug when the
///    contenteditable attribute is included anywhere else in the document.
///    Otherwise it causes space to appear at the top and bottom of elements
///    that are clearfixed.
/// 2. The use of `table` rather than `block` is only necessary if using
///    `:before` to contain the top-margins of child elements.
///
/// Source: http://nicolasgallagher.com/micro-clearfix-hack/
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
@mixin clearfix() {
  &::before,
  &::after {
    display: table; // 2
    content: ' '; // 1
  }

  &::after {
    clear: both;
  }
}

///
/// Color element states like active, visited, hover and focus.
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
/// @param {string} $state
///   The default state of the element.
///
/// @param {string} $state-hover
///   The hover state of the element.
///
/// @param {string} $property
///   The property to be styled.
///
@mixin element-states($state, $state-hover, $property: "color") {
  #{$property}: $state;

  &:active,
  &:visited {
    @content;
  }

  &:hover,
  &:focus {
    #{$property}: $state-hover;
  }
}

///
/// Sass CSS triangle mixin, create any kind of triangles with ease
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
/// @param {string} $direction
///   The type of triangle.
///
/// @param {int} $size-h
///   The width of the triangle.
///
/// @param {int} $size-v
///   The height of the triangle.
///
/// @param {int} $color
///   The color of the triangle.
///
@mixin triangle($direction, $size-h, $size-v, $color) {
  display: block;
  width: 0;
  height: 0;
  transform: scale(.9999);
  border-style: solid;
  content: '';

  @if $direction == top {
    border-width: 0 $size-v $size-h;
    border-color: transparent transparent $color;
  }
  @if $direction == bottom {
    border-width: $size-v $size-h 0 $size-v;
    border-color: $color transparent transparent;
  }
  @if $direction == left {
    border-width: $size-v $size-h $size-v 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == right {
    border-width: $size-v 0 $size-v $size-h;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topright {
    border-width: 0 $size-h $size-v 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == bottomright {
    border-width: 0 0 $size-h $size-v;
    border-color: transparent transparent $color;
  }
  @if $direction == bottomleft {
    border-width: $size-h 0 0 $size-v;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topleft {
    border-width: $size-h $size-v 0 0;
    border-color: $color transparent transparent;
  }
}

///
/// Force a link without link style.
///
/// @since 3.0.0
/// @group tools
/// @access public
/// @author Gert-Jan Meire
///
@mixin no-link-style() {
  a {
    text-decoration: none !important; // sass-lint:disable-line no-important
  }
}

///
/// Split a string based on a separator string.
///
/// @since 3.0.0
/// @group tools
/// @access private
/// @author Gert-Jan Meire
///
/// @param {string} $string
///   The string to be split.
///
/// @param {string} $separator
///   The separator by which to split the $string.
///
@function str-split($string, $separator: '--') {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);

    @if ($separator == '--') {
      // remove item and separator from string
      $string: str-slice($string, $index + 2);
    }
    @else {
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
    }
    // find new index of separator
    $index: str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

///
/// Cast a string to a number.
///
/// @since 3.0.0
/// @group tools
/// @access private
/// @author Gert-Jan Meire
///
/// @param {string} $value
///   The string to turn into a number.
///
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    }
    @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    }
    @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}
