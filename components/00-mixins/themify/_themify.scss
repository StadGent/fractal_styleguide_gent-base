////
///
/// This file defines all themify related functions and mixins.
///
/// @group colors
/// @author Gert-Jan Meire
///
////

///
/// Do check if the default value exists in map colors.
///
///   We check if the given $exception exists in the theme map.
///   If it does we return the color applied there.
///   If it does NOT we split the $default string based on two dasshes --
///   We then get the color palette value based on that key from the $themes map.
///   and we apply the correct tint through the color() mixin.
///
/// @since 3.0.0
/// @group colors
/// @access private
/// @author Gert-Jan Meire
/// @require $colors
/// @require str-split
/// @require color
/// @require number
///
/// @param {map} $colors
///   The map of colors to check.
///
/// @param {string} $default
///   The default value for the themified property.
///
/// @param {string} $exception
///   The exception value for the themified property.
///   This is the exception optionally used in subthemes.
///
@function set-themified-property($colors, $default, $exception) {
  @if map-has-key($colors, $exception) {
    @return map-get($colors, $exception);
  }

  // Split the string based on two dashes --
  $color-variant: str-split($default);

  // Get the length of the color variant list.
  $length: length($color-variant);

  // Make sure the list exists of 2 parts.
  @if $length > 1 {
    // If a tint has been specified we should apply the correct effect.
    @if nth($color-variant, 2) != '' {
      // Get the tint variant list containing the tint type
      // and the tint strength.
      $tint-variant: str-split(nth($color-variant, 2), '-');

      // Check if the tint variant is a valid list.
      @if length($tint-variant) > 1 {
        // Get the base-color from the color variant list.
        $base-color: nth($color-variant, 1);

        // Transparent is default false.
        $transparent: false;
        @if length($color-variant) > 2 and nth($color-variant, 3) == 'transparent' {
          $transparent: true;
        }

        // If it's a light variant.
        @if nth($tint-variant, 1) == 'lighten' {
          // Get the negative tint strength.
          $tint: number(-#{nth($tint-variant, 2)});

          @return color($base-color, $tint, $transparent, $colors);
        }

        // If it's a dark variant.
        @if nth($tint-variant, 1) == 'darken' {
          // Get the positive tint strength.
          $tint: number(nth($tint-variant, 2));

          @if $transparent {
            @warn "Darker colors can not be transparent!";
          }

          @return color($base-color, $tint, false, $colors);
        }
      }
    }
  }
  @else {
    // Check if the first item of the variant is not empty.
    @if nth($color-variant, 1) != '' {
      // Set the $base-color.
      $base-color: nth($color-variant, 1);

      @return color($base-color, 0, false, $colors);
    }
  }

  @return '';
}

///
/// Theme mixin to generate all themes for components.
/// This generates the necessary theme CSS for all defined themes based on the
/// $themes map defined in _colors.scss
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @author Gert-Jan Meire
///
/// @param {string} $property [null]
///   The property to themify.
///
/// @param {string} $default [null]
///   The default value for the themified property.
///
/// @param {string} $exception [null]
///   The exception value for the themified property.
///   This is the exception optionally used in subthemes.
///
@mixin theme($property: null, $default: null, $exception: null) {
  @each $theme, $colors in $themes {
    // Apply the default section as default color scheme if there is no section
    // defined in the DOM.
    .cs--#{$theme} & {
      #{$property}: set-themified-property($colors, $default, $exception);
    }
  }
}

