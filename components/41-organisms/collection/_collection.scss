// Dynamic system with different gutters and items spanning multiple columns.
// Calculation at the bottom

$grid-gutter-width: $gutter-width * 1.5;
$grid-cols: (2, 3, 4, 5);

ul[class^=grid-] {
  @extend %list-no-style;

  display: flex;
  flex-wrap: wrap;
  gap: $grid-gutter-width;  // sass-lint:disable-line no-misspelled-properties

  > li {
    flex-basis: 100%;
    flex-shrink: 1;
    margin: 0;
  }
}

.grid__show-more {
  margin: 20px 0;
  font-size: .9rem;
  text-align: center;
}

// Tablet version has a deviating nr of columns for grid 5 and 4
ul.grid-5 {
  > li {
    @include tablet {
      flex-basis: calc((100% - ($grid-gutter-width * 3)) / 4);
      max-width: calc((100% - ($grid-gutter-width * 3)) / 4);
    }
  }
}

ul.grid-4 {
  > li {
    @include tablet {
      flex-basis: calc((100% - ($grid-gutter-width * 2)) / 3);
      max-width: calc((100% - ($grid-gutter-width * 2)) / 3);
    }
  }
}

// Grid-2-1 is an irregular grid
ul.grid-2-1 {
  > li {
    @include desktop {
      flex-basis: calc((100% - ($grid-gutter-width * 2)) / 3);
      max-width: calc((100% - ($grid-gutter-width * 2)) / 3);
    }

    &:first-child {
      @include desktop {
        flex-basis: calc(((100% - ($grid-gutter-width * 2)) / 3 * 2) + $grid-gutter-width);
        max-width: calc(((100% - ($grid-gutter-width * 2)) / 3 * 2) + $grid-gutter-width);
      }
    }
  }
}

//// GENERIC CODE FOR COLUMN WIDTH CALCULATION ////
@each $col in $grid-cols {
  ul.grid-#{$col} {
    > li {
      @include phablet {
        flex-basis: calc((100% - $grid-gutter-width) / 2);
        max-width: calc((100% - $grid-gutter-width) / 2);
      }

      @include desktop {
        flex-basis: calc((100% - ($grid-gutter-width * ($col - 1))) / $col);
        max-width: calc((100% - ($grid-gutter-width * ($col - 1))) / $col);
      }
    }
  }
}
