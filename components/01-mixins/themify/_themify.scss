//
// Merge {Map} $themes map if {Map} $overwrite-themes exist.
//
$themes: map-merge($themes, $overwrite-themes);

//
// Do check if the default value exists in map colors.
//
// @access private
//
// @param $colors map
//   The map of colors to check.
//
// @param $default string
//   The default value for the themified property.
//
// @param $exception string
//   The exception value for the themified property.
//   This is the exception optionally used in subthemes.
//
@function set-themified-property($colors, $default, $exception) {
  @if map-has-key($colors, $exception) {
    @return map-get($colors, $exception);
  }
  @else {
    @return map-get($colors, $default);
  }
}

//
// Theme mixin to generate all themes for components.
// This generates the necessary theme CSS for all defined themes based on the
// $themes map defined in _colors.scss
//
// @access public
//
// @param $property string
//   The property to themify.
//
// @param $default string
//   The default value for the themified property.
//
// @param $exception string
//   The exception value for the themified property.
//   This is the exception optionally used in subthemes.
//
@mixin theme($property: null, $default: null, $exception: null) {
  @each $theme, $colors in $themes {
    // Apply the default section as default color scheme if there is no section
    // defined in the DOM.
    @if $theme == "default" {
      #{$property}: set-themified-property($colors, $default, $exception);
    }

    .cs--#{$theme} & {
      #{$property}: set-themified-property($colors, $default, $exception);
    }
  }
}

