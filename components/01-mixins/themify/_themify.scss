//
// Merge {Map} $themes map if {Map} $overwrite-themes exist.
//
$themes: map-merge($themes, $overwrite-themes);

//
// Split a string based on a separator string.
//
// @access private
//
// @param $string string
//   The string to be split.
//
// @param $separator string
//   The separator by which to split the $string.
//
@function str-split($string, $separator: '--') {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);

    @if ($separator == '--') {
      // remove item and separator from string
      $string: str-slice($string, $index + 2);
    }
    @else {
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
    }
    // find new index of separator
    $index: str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

//
// Cast a string to a number.
//
// @access private
//
// @param $value string
//   The string to turn into a number.
//
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    }
    @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    }
    @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

//
// Do check if the default value exists in map colors.
//
//   We check if the given $exception exists in the theme map.
//   If it does we return the color applied there.
//   If it does NOT we split the $default string based on two dasshes --
//   We then get the color palette value based on that key from the $themes map.
//   and we apply the correct tint through the color() mixin.
//
// @access private
//
// @param $colors map
//   The map of colors to check.
//
// @param $default string
//   The default value for the themified property.
//
// @param $exception string
//   The exception value for the themified property.
//   This is the exception optionally used in subthemes.
//
//
@function set-themified-property($colors, $default, $exception) {
  @if map-has-key($colors, $exception) {
    @return map-get($colors, $exception);
  }

  // Split the string based on two dashes --
  $color-variant: str-split($default);

  // Get the length of the color variant list.
  $length: length($color-variant);

  // Make sure the list exists of 2 parts.
  @if $length > 1 {
    // If a tint has been specified we should apply the correct effect.
    @if nth($color-variant, 2) != '' {
      // Get the tint variant list containing the tint type
      // and the tint strength.
      $tint-variant: str-split(nth($color-variant, 2), '-');

      // Check if the tint variant is a valid list.
      @if length($tint-variant) > 1 {
        // Get the base-color from the color variant list.
        $base-color: nth($color-variant, 1);

        // If it's a light variant.
        @if nth($tint-variant, 1) == 'lighten' {
          // Get the negative tint strength.
          $tint: number(-#{nth($tint-variant, 2)});

          @return color($base-color, $tint, $colors);
        }

        // If it's a dark variant.
        @if nth($tint-variant, 2) == 'darken' {
          // Get the positive tint strength.
          $tint: number(nth($tint-variant, 2));

          @return color($base-color, $tint, $colors);
        }
      }
    }
  }
  @else {
    // Check if the first item of the variant is not empty.
    @if nth($color-variant, 1) != '' {
      // Set the $base-color.
      $base-color: nth($color-variant, 1);

      @return color($base-color, 0, $colors);
    }
  }

  @return '';
}

//
// Theme mixin to generate all themes for components.
// This generates the necessary theme CSS for all defined themes based on the
// $themes map defined in _colors.scss
//
// @access public
//
// @param $property string
//   The property to themify.
//
// @param $default string
//   The default value for the themified property.
//
// @param $exception string
//   The exception value for the themified property.
//   This is the exception optionally used in subthemes.
//
@mixin theme($property: null, $default: null, $exception: null) {
  @each $theme, $colors in $themes {
    // Apply the default section as default color scheme if there is no section
    // defined in the DOM.
    @if $theme == "default" {
      #{$property}: set-themified-property($colors, $default, $exception);
    }

    .cs--#{$theme} & {
      #{$property}: set-themified-property($colors, $default, $exception);
    }
  }
}

