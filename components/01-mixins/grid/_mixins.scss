//
// Globally defined grid mixins.
// These mixins can be used by multiple components.
//

//
// Creates a wrapper for a series of columns.
//
// @access public
//
// @param $gutter [$gutter-width] - The width of grid gutters in rems.
//
@use "sass:math";

@mixin make-row($gutter: $gutter-width) {
  @include clearfix();
  margin-right: -($gutter * .5);
  margin-left: -($gutter * .5);
}

//
// Mixins for mobile classes.
//
// @access public
//
// @param $columns - The number of columns for this element.
// @param $gutter [$gutter-width] - The width of grid gutters in rems.
//
@mixin make-mobile-column($columns, $gutter: $gutter-width) {
  position: relative;
  width: percentage(math.div($columns, $grid-columns));
  min-height: 1px;
  padding-right: ($gutter * .5);
  padding-left:  ($gutter * .5);
  float: left;
}

//
// Mixins for a mobile offset of a column.
//
// @access public
//
// @param $columns - The number of columns for the offset of this element.
//
@mixin make-mobile-column-offset($columns) {
  margin-left: percentage(math.div($columns, $grid-columns));
}

//
// Mixins to push columns.
//
// @access public
//
// @param $columns - The number of columns to push this element.
//
@mixin make-mobile-column-push($columns) {
  left: percentage(math.div($columns, $grid-columns));
}

//
// Mixins to pull columns.
//
// @access public
//
// @param $columns - The number of columns to pull this element.
//
@mixin make-mobile-column-pull($columns) {
  right: percentage(math.div($columns, $grid-columns));
}

//
// Mixins for tablet classes.
//
// @access public
//
// @param $columns - The number of columns for this element.
// @param $gutter [$gutter-width] - The width of grid gutters in rems.
//
@mixin make-tablet-column($columns, $gutter: $gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter * .5);
  padding-left:  ($gutter * .5);

  @media (min-width: $bp-tablet) {
    width: percentage(math.div($columns, $grid-columns));
    float: left;
  }
}

//
// Mixins for a mobile offset of a column.
//
// @access public
//
// @param $columns - The number of columns for the offset of this element.
//
@mixin make-tablet-column-offset($columns) {
  @media (min-width: $bp-tablet) {
    margin-left: percentage(math.div($columns, $grid-columns));
  }
}

//
// Mixins to push columns.
//
// @access public
//
// @param $columns - The number of columns to push this element.
//
@mixin make-tablet-column-push($columns) {
  @media (min-width: $bp-tablet) {
    left: percentage(math.div($columns, $grid-columns));
  }
}

//
// Mixins to pull columns.
//
// @access public
//
// @param $columns - The number of columns to pull this element.
//
@mixin make-tablet-column-pull($columns) {
  @media (min-width: $bp-tablet) {
    right: percentage(math.div($columns, $grid-columns));
  }
}

//
// Mixins for desktop classes.
//
// @access public
//
// @param $columns - The number of columns for this element.
// @param $gutter [$gutter-width] - The width of grid gutters in rems.
//
@mixin make-desktop-column($columns, $gutter: $gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter * .5);
  padding-left:  ($gutter * .5);

  @media (min-width: $bp-desktop) {
    width: percentage(math.div($columns, $grid-columns));
    float: left;
  }
}

//
//
//
@mixin make-desktop-column-offset($columns) {
  @media (min-width: $bp-desktop) {
    margin-left: percentage(math.div($columns, $grid-columns));
  }
}

//
// Mixins to push columns.
//
// @access public
//
// @param $columns - The number of columns to push this element.
//
@mixin make-desktop-column-push($columns) {
  @media (min-width: $bp-desktop) {
    left: percentage(math.div($columns, $grid-columns));
  }
}

//
//
//
@mixin make-desktop-column-pull($columns) {
  @media (min-width: $bp-desktop) {
    right: percentage(math.div($columns, $grid-columns));
  }
}
