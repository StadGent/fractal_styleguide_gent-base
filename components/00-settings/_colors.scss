////
///
/// This file defines all color settings, mixins and functions necessary
/// to provide the themify engine the style guide is based on.
///
/// @group colors
///
////

///
/// The colors map defines all basic and secondary colors.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @type map
///
$colors: (
  // 6.x colors
  'gray': #001823,
  'blue': #005ba9,
  'yellow': #ffdb5a,
  'cyan': #009de0,
  'cyan-hover': #1abcff,
  'red': #ea0d33,
  'orange': #e06c00,
  'green': #2c8726,
  'green-pastel': #8ee088,
  'white': #fff,

  // 5.x colors legacy
  'cyan-wcag': #007db3,
  'dark-gray': #23333a,
  'teal': #29cfc9,
  'lemon': #f5d605,
  'pink': #f09,
  'purple': #5a0ec4,
) !default;


///
/// This map describes different tints. These are used to calculate all
/// color swatches based on the base colors in $colors.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @type map
///
$tints: (
  1: 10%,
  2: 25%,
  3: 50%,
  -1: .75,
  -2: .6,
  -3: .5,
  -4: .25,
  -5: .1,
  -6: .06,
  -7: .02,
) !default;

///
/// Themify adds the color for box shadows, this just defines the box shadow
/// without a specific color so it can be reused.
/// @todo Remove when shadows are not used anymore.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @type string
///
$box-shadow-primary: 0 2px 8px 0;
$box-shadow-secondary: 0 2px 12px 0;

///
/// A function to convert a rgba color to a rgb color.
///
/// @since 3.0.0
/// @group colors
/// @access public
///
/// @param {color} $base-color
///   The key of the color in the $colors map.
///
/// @param {color} $background [#fff]
///   The color to mix with.
///
@function rgba-to-rgb($base-color, $background: #fff) {
  @return mix(rgb(red($base-color), green($base-color), blue($base-color)), $background, alpha($base-color) * 100%);
};

///
/// A function to get a color from the $colors map.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @require $colors
///
/// @param {color} $base-color
///   The key of the color in the $colors map.
///
/// @param {int} $tint [0]
///   The tint to be applied to the base color.
///
/// @param {boolean} $transparent [false]
///   True when you need a RGBA color, otherwise HEX value will return.
///
/// @param {map} colors$ [$colors]
///   The colors array to use to calculate the correct color tint.
///
@function color($base-color, $tint: 0, $transparent: false, $colors: $colors) {
  @if not map-has-key($colors, $base-color) {
    @warn "`#{inspect($base-color)}` doesn't seem to be a valid base color.";
  }

  $color: null;
  @if $tint != 0 {
    @if $tint > 0 {
      $color: shade($base-color, $tint, $colors);
    }
    @if $tint < 0 {
      $color: tint($base-color, $tint, $colors);
    }

    @if $transparent {
      @return $color;
    }
    @else {
      @return rgba-to-rgb($color);
    }
  }
  @if $tint == 0 {
    @return map-get($colors, $base-color);
  }
};

///
/// A function to adjust the opacity of a base color.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @require $tints
/// @require $colors
///
/// @param {color} $base-color
///   The base color to be modified.
///
/// @param {int} $tint
///   The tint value to modify the base color with.
///
/// @param {map} colors$ [$colors]
///   The colors array to use to calculate the correct color tint.
///
@function tint($base-color, $tint, $colors: $colors) {
  @if not map-has-key($tints, $tint) {
    @warn "`#{inspect($tint)}` doesn't seem to be a valid tint value.";
  }

  @return rgba(map-get($colors, $base-color), map-get($tints, $tint));
};

///
/// A function to darken a base color.
///
/// @since 3.0.0
/// @group colors
/// @access public
/// @require $tints
/// @require $colors
///
/// @param {color} $base-color
///   The base color to be modified.
///
/// @param {int} $tint
///   The value to shade the base color with.
///
/// @param {map} colors$ [$colors]
///   The colors array to use to calculate the correct color tint.
///
@function shade($base-color, $tint, $colors: $colors) {
  $color-black: #000;

  @if not map-has-key($tints, $tint) {
    @warn "`#{inspect($tint)}` doesn't seem to be a valid tint value.";
  }

  @return mix($color-black, map-get($colors, $base-color), map-get($tints, $tint));
};
